<!-- 加密功能 -->
< % if(主题。PhotoVerifyPassword.enable) { % >
< script src = " < %-theme . libs . js . crypto % > " > </script >
<脚本>
(函数(){
let pwd = ' < %-page . password % > '；

if (pwd && pwd.length > 0) {
如果(pwd！== CryptoJS。SHA256(提示(' < %-主题。photoverify password . prompt message % > '))。toString(CryptoJS.enc.Hex)) {
警报(' < %-主题。photoverifypassword . error message % > ')；
location . href = ' < %-URL _ for("/")% > '；
                }
            }
        })();
</script >
<% } %>

<!-< %-partial(' _ partial/BG-cover ')% >->

< link rel = " style sheet " href = " < %-theme . libs . CSS . baguetteboxcss % > " >
<!-该主题自带的lightGallery.js在图片多的时候会很卡,所以弃用,使用了一个我在网上找的长方形盒子，很轻量级,就是功能少了点 - >
< script src = " < %-theme . libs . js . baguetteboxjs % > " > </script >
<风格>
。我的画廊。照片图像{
过渡:全0.6s缓入缓出；
    }     
。我的画廊。照片:悬停图像{
不透明度:0.6；
变换:缩放(1.05)；
    }      
。我的图库{
边距:20px自动；
    }   
。妙树。标题{
font-family: MV博立；
    }
。苗树{
填充:20px
边框:1px虚线# e6e6e6
颜色:# 969696；
位置:相对；
显示:内嵌-块；
宽度:75%；
背景:# fbfbfb50
边框半径:10px
字体大小:16px
边距:24px自动12px
        
    }
身体。黑。苗树{
背景:0 0；
边框:1px虚线# 888；
    }
正文{
溢出:可见！重要；
    }
。方框{
位置:相对；
        }
。框图像{
宽度:350px
垂直对齐:顶部；
填充:8px
边框半径:10px
过渡:全0.5s
    }
。框图像:悬停{
变换:缩放(1.05)；
    }
。页脚{
显示:无
    }
正文{
溢出-y:可见！重要；
    }
标题{
背景色:# 000；
    }
。标贴{
font-family: MV博立；
        }   
    @media only screen and (max-width: 1058px) {
        .box {
            margin-left: 145px;
        }
    }
    @media only screen and (max-width: 770px) {
        .box {
            margin-left: 15px;
        }
    }
    @media only screen and (max-width: 500px) {
        #previous-button, #next-button {
            display: none;
        }
    }
    @media only screen and (max-width: 380px) {
        .box {
            margin-left: -5px;
        }
    }
    @media only screen and (max-width: 323px) {
        .box img {
            width: 296px;
            left: 0;
        }
    }
</style>

<div class="tag-title center-align">
    <div class="miaoshus">
        <div class="title center-align">
            “ <% if (is_home() && config.subtitle && config.subtitle.length > 0) { %>
                <%= config.subtitle %>
            <% } else { %>
                <%= page.title %>
            <% } %> ”
        </div>
        “ <%- theme.gallery.title %> ”
        “ 这里有光影流年，还有两朵穿衣裳的云，相拥在明天的河岸。”
    </div>
</div>

<!-- 相册 -->
<section class="gallery">
    <div id="myGallery" class="my-gallery">
        <div class="row">
            <div class="box">
            <% if (site.data && site.data.gallery) { %>
                <% var galleries = site.data.gallery; 
                    var pageTitle = page.title;
                    function getCurrentGallery(galleries, pageTitle) {
                        for (let i = 0; i < galleries.length; i++) {
                            if (galleries[i]['name'] == pageTitle) {
                                return galleries[i];
                            }
                        }
                    }
                    var currentGallery = getCurrentGallery(galleries, pageTitle);
                    var photos = currentGallery.album;
                %>
                <% for (var i = 0, len = photos.length; i < len; i++) { %>
                    <% var my_album = photos[i]; %>                   
                        <a href="<%- my_album.img_url %>" data-caption="<%- my_album.title %>">
                            <img class="mat" src="/medias/loading.svg" data-src="<%- my_album.img_url %>" alt="img"+<%- i %> >
                        </a>                   
                <% } %>
            <% } %>
        </div>
        </div>
    </div>
</section>
<script>
    $(function () {
        // 获取图片的宽度(200px)
        let imgWidth = $('.mat').outerWidth(); // 200
        waterfallHandler();
        // 瀑布流处理
        function waterfallHandler() {
            // 获取图片的列数
            let column = parseInt($(window).width() / imgWidth);
            // 高度数组
            let heightArr = [];
            for(let i=0; i<column; i++) {
                heightArr[i] = 0;
            }
            // 遍历所有图片进行定位处理
            $.each($('.mat'), function (index, item) {
                // 当前元素的高度
                let itemHeight = $(item).outerHeight();
